name: CI - Build and Test

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        # Mock environment variables for build
        MONGODB_URI: "mongodb://mock:27017/test"
        R2_ACCESS_KEY_ID: "mock_key"
        R2_SECRET_ACCESS_KEY: "mock_secret"
        R2_ACCOUNT_ID: "mock_account"
        R2_BUCKET_NAME: "mock_bucket"
        R2_ENDPOINT: "https://mock.r2.cloudflarestorage.com/mock"
        MAIL_ID: "mock@example.com"
        MAIL_PW: "mock_password"
        X_API_KEY: "mock_api_key"
        SKIP_DB_VALIDATION: "true"
        # Admin JWT Authentication
        ADMIN_ACCESS_TOKEN_SECRET: "mock_admin_access_token_secret"
        ADMIN_REFRESH_TOKEN_SECRET: "mock_admin_refresh_token_secret"
        ACCESS_TOKEN_EXPIRES_IN: "15m"
        REFRESH_TOKEN_EXPIRES_SHORT: "1d"
        REFRESH_TOKEN_EXPIRES_LONG: "30d"
        # Undergraduate JWT Authentication
        UNDERGRAD_JWT_SECRET: "mock_undergrad_jwt_secret_key"
        UNDERGRAD_JWT_EXPIRES_IN: "7d"
        UNDERGRAD_REFRESH_TOKEN_SECRET: "mock_undergrad_refresh_token_secret"
        UNDERGRAD_REFRESH_TOKEN_EXPIRES_IN: "30d"
        UNDERGRAD_EMAIL_VERIFICATION_SECRET: "mock_undergrad_email_verification_secret"
        UNDERGRAD_EMAIL_VERIFICATION_EXPIRES_IN: "24h"
        # Company JWT Authentication
        COMPANY_JWT_SECRET: "mock_company_jwt_secret_key"
        COMPANY_JWT_EXPIRES_IN: "7d"
        COMPANY_REFRESH_SECRET: "mock_company_refresh_secret_key"
        COMPANY_REFRESH_EXPIRES_IN: "30d"
        COMPANY_EMAIL_VERIFICATION_SECRET: "mock_company_email_verification_secret"
        COMPANY_EMAIL_VERIFICATION_EXPIRES_IN: "24h"

    - name: Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found, skipping..."
        fi
      continue-on-error: true

  branch-protection:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Check target branch
      run: |
        if [ "${{ github.event.pull_request.base.ref }}" = "main" ] && [ "${{ github.event.pull_request.head.ref }}" != "dev" ]; then
          echo "‚ùå ERROR: Direct merges to main are not allowed!"
          echo "üîÑ Please merge to 'dev' branch first."
          echo "üìã Workflow:"
          echo "   1. Create PR to 'dev' branch"
          echo "   2. After review and testing, merge to 'dev'"
          echo "   3. For production release, create PR from 'dev' to 'main'"
          exit 1
        fi
        
        if [ "${{ github.event.pull_request.base.ref }}" = "main" ] && [ "${{ github.event.pull_request.head.ref }}" = "dev" ]; then
          echo "‚úÖ Production release PR detected: dev ‚Üí main"
          echo "üöÄ This will be deployed to production after merge."
        fi
        
        if [ "${{ github.event.pull_request.base.ref }}" = "dev" ]; then
          echo "‚úÖ Development PR detected: feature ‚Üí dev"
          echo "üß™ Changes will be tested in development environment."
        fi

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Check for secrets in code
      run: |
        echo "üîç Checking for potential secrets..."
        if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}" src/ --exclude-dir=node_modules || true; then
          echo "‚ö†Ô∏è  Potential secrets found in code. Please review."
        else
          echo "‚úÖ No obvious secrets found in source code."
        fi

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: [build-and-test, branch-protection]
    if: failure()
    
    steps:
    - name: Notify on failure
      run: |
        echo "‚ùå CI Pipeline Failed!"
        echo "üìã Common issues to check:"
        echo "   ‚Ä¢ TypeScript compilation errors"
        echo "   ‚Ä¢ Build failures"
        echo "   ‚Ä¢ Incorrect target branch (use 'dev', not 'main')"
        echo "   ‚Ä¢ Missing environment variables"
        echo ""
        echo "üîß To fix:"
        echo "   1. Check the logs above for specific errors"
        echo "   2. Fix the issues locally"
        echo "   3. Test with 'npm run build' locally"
        echo "   4. Push your fixes"
        echo ""
        echo "üí° Remember: Always merge to 'dev' branch first!"

  success-notification:
    runs-on: ubuntu-latest
    needs: [build-and-test, branch-protection, security-check]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "‚úÖ All checks passed!"
        echo "üéâ Your code is ready for review and merge."
        if [ "${{ github.event.pull_request.base.ref }}" = "main" ]; then
          echo "üöÄ Ready for production deployment!"
        else
          echo "üß™ Ready for development environment!"
        fi
